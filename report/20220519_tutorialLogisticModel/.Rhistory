# set conditions for code output
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE,fig.pos = "!H")
showcode=FALSE #for include or echo - echo=showcode
runbash=FALSE # for eval=runbash
runR=TRUE #for eval=runR
load(file= "data/winRegions.RData")
load(file= "data/analysisParams.RData")
pacman::p_load(MASS)
mod<-polr(myFormula, data = winRegions, Hess = T)
summary(mod)
## Store summary table
ctable <- coef(summary(mod))
## Calculate and store p values
p <- round(pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2, 8)
## combined table
ctable <- cbind(ctable, "p value" = p)
knitr::kable(ctable)
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint.default(mod) # CIs assuming normality
knitr::kable(ci)
CIodds<-data.frame(exp(cbind(OR = coef(mod), ci)))
colnames(CIodds)<-c("Odds Ratio", "2.5%", "97.5%")
knitr::kable(CIodds)
pacman::p_load("ggplot2")
# Finally, a summary of the model
CIodds$Variable<-rownames(CIodds)
ctable<-data.frame(ctable)
ctable$Variable<-rownames(ctable)
CIodds<-merge(CIodds, ctable)
CIodds$sig<-ifelse(CIodds$p.value < 0.05, T, F)
ggplot(CIodds)+geom_point(aes(x = Variable, y = `Odds Ratio`) )+
geom_errorbar(aes(ymin=`2.5%`, ymax=`97.5%`, x=Variable), width=.1, alpha = 0.5)+
geom_text(aes(x = Variable, y = Inf, label = round(p.value, 3), color = sig), vjust = 1.5, size = 3)+
scale_color_manual(values=c("FALSE"="black","TRUE"="red"))+
theme(legend.position = "none")+
geom_hline(yintercept=1, width=.1, alpha = 0.3)+
ggtitle("Odds ratios calculated from coefficients")
pacman::p_load("brant", "Hmisc")
btest<-brant(mod)
knitr::kable(btest)
pacman::p_load("Hmisc", "reshape2")
# Estimate values that will be graphed
sf <- function(y) {
nmax<-length(levels(winRegions[,yVar]))-1
vec<-c()
names<-c()
for (n in c(0:nmax)){
names <- c(names, paste0("Y>=",n))
vec<-c(vec, qlogis(mean( y >= n)))
}
names(vec)<-names
return(vec)
}
# Call function sf on several subsets of the data defined by the predictors
winRegions$numVar<-winRegions[,yVar]
levels(winRegions$numVar) <- c(1:length(levels(winRegions$numVar)))-1
winRegions$numVar <-as.numeric(as.character(winRegions$numVar))
s<-summary(as.formula(paste0("numVar ~ ", xVars)), data=winRegions, fun=sf)
# Get column names
namevec<-attributes(s)$vname
for(n in c(1:length(namevec))){  ifelse(namevec[n]=="", namevec[n] <- stored, stored <-namevec[n]) }
# Transform to dataframe
df<-data.frame(unclass(s))
df$categValues<-rownames(df)
df$categories<-namevec
# Melt dataframe
mdf<-melt(df, id.vars = c("categValues", "categories", "N"))
#Generate variable levels
cat<-unique(winRegions[,yVar])
ncat <- length(levels(winRegions[,yVar]))-1 # number of categories
varlevels<-c(">=0")
for(n in c(1:ncat)){varlevels <- c(varlevels, paste0( paste(cat[c(1:n)], collapse = "+"), " vs ", paste(cat[c(n+1:length(cat))], collapse = "+")))}
levels(mdf$variable)<-varlevels
# Plot
ggplot(mdf[mdf$categories !="Overall" & mdf$variable != ">=0",], aes(x = categValues, y = (value), color=variable, group = variable))+
geom_point()+geom_line()+
facet_wrap(categories~., scales = "free")+
scale_color_manual(values = c("#440154","#31688e","#35b779" ))+ #, "#fde725"
ggtitle("Proportional odds visual test")+
ylab("Log Odds Ratio")+xlab("")+
guides(color=guide_legend(title=yVar))+ theme(legend.position = "top", axis.text.x = element_text(size=8))
pacman::p_load("Hmisc", "reshape2")
# Estimate values that will be graphed
sf <- function(y) {
nmax<-length(levels(winRegions[,yVar]))-1
vec<-c()
names<-c()
for (n in c(0:nmax)){
names <- c(names, paste0("Y>=",n))
vec<-c(vec, qlogis(mean( y >= n)))
}
names(vec)<-names
return(vec)
}
# Call function sf on several subsets of the data defined by the predictors
winRegions$numVar<-winRegions[,yVar]
levels(winRegions$numVar) <- c(1:length(levels(winRegions$numVar)))-1
winRegions$numVar <-as.numeric(as.character(winRegions$numVar))
s<-summary(as.formula(paste0("numVar ~ ", xVars)), data=winRegions, fun=sf)
# Get column names
namevec<-attributes(s)$vname
for(n in c(1:length(namevec))){  ifelse(namevec[n]=="", namevec[n] <- stored, stored <-namevec[n]) }
# Transform to dataframe
df<-data.frame(unclass(s))
df$categValues<-rownames(df)
df$categories<-namevec
# Melt dataframe
mdf<-melt(df, id.vars = c("categValues", "categories", "N"))
#Generate variable levels
cat<-unique(winRegions[,yVar])
ncat <- length(levels(winRegions[,yVar]))-1 # number of categories
varlevels<-c(">=0")
for(n in c(1:ncat)){varlevels <- c(varlevels, paste0( paste(cat[c(1:n)], collapse = "+"), " vs ", paste(cat[c(n+1:length(cat))], collapse = "+")))}
levels(mdf$variable)<-varlevels
# Plot
ggplot(mdf[mdf$categories !="Overall" & mdf$variable != ">=0",], aes(x = categValues, y = (value), color=variable, group = variable))+
geom_point()+geom_line()+
facet_wrap(categories~., scales = "free")+
scale_color_manual(values = c("#440154","#31688e","#35b779" ))+ #, "#fde725"
ggtitle("Proportional odds visual test")+
ylab("Log Odds Ratio")+xlab("")+
guides(color=guide_legend(title=yVar))+ theme(legend.position = "top", axis.text.x = element_text(size=8))
s
# Get column names
namevec<-attributes(s)$vname
namevec
for(n in c(1:length(namevec))){  ifelse(namevec[n]=="", namevec[n] <- stored, stored <-namevec[n]) }
namevec
# Transform to dataframe
df<-data.frame(unclass(s))
df
df$categValues<-rownames(df)
df
df$categories<-namevec
df
#Generate variable levels
cat<-unique(winRegions[,yVar])
cat
order(cat)
cat[order(cat)]
pacman::p_load("Hmisc", "reshape2")
# Estimate values that will be graphed
sf <- function(y) {
nmax<-length(levels(winRegions[,yVar]))-1
vec<-c()
names<-c()
for (n in c(0:nmax)){
names <- c(names, paste0("Y>=",n))
vec<-c(vec, qlogis(mean( y >= n)))
}
names(vec)<-names
return(vec)
}
# Call function sf on several subsets of the data defined by the predictors
winRegions$numVar<-winRegions[,yVar]
levels(winRegions$numVar) <- c(1:length(levels(winRegions$numVar)))-1
winRegions$numVar <-as.numeric(as.character(winRegions$numVar))
s<-summary(as.formula(paste0("numVar ~ ", xVars)), data=winRegions, fun=sf)
# Get column names
namevec<-attributes(s)$vname
for(n in c(1:length(namevec))){  ifelse(namevec[n]=="", namevec[n] <- stored, stored <-namevec[n]) }
# Transform to dataframe
df<-data.frame(unclass(s))
df$categValues<-rownames(df)
df$categories<-namevec
# Melt dataframe
mdf<-melt(df, id.vars = c("categValues", "categories", "N"))
#Generate variable levels
cat<-unique(winRegions[,yVar])
cat<-cat[order(cat)]
ncat <- length(levels(winRegions[,yVar]))-1 # number of categories
varlevels<-c(">=0")
for(n in c(1:ncat)){varlevels <- c(varlevels, paste0( paste(cat[c(1:n)], collapse = "+"), " vs ", paste(cat[c(n+1:length(cat))], collapse = "+")))}
levels(mdf$variable)<-varlevels
# Plot
ggplot(mdf[mdf$categories !="Overall" & mdf$variable != ">=0",], aes(x = categValues, y = (value), color=variable, group = variable))+
geom_point()+geom_line()+
facet_wrap(categories~., scales = "free")+
scale_color_manual(values = c("#440154","#31688e","#35b779" ))+ #, "#fde725"
ggtitle("Proportional odds visual test")+
ylab("Log Odds Ratio")+xlab("")+
guides(color=guide_legend(title=yVar))+ theme(legend.position = "top", axis.text.x = element_text(size=8))
cat
ncat <- length(levels(winRegions[,yVar]))-1 # number of categories
ncat
varlevels<-c(">=0")
varlevels
for(n in c(1:ncat)){varlevels <- c(varlevels, paste0( paste(cat[c(1:n)], collapse = "+"), " vs ", paste(cat[c(n+1:length(cat))], collapse = "+")))}
varlevels
#Generate variable levels
cat<-unique(winRegions[,yVar])
cat<-cat[order(cat)]
cat
ncat <- length(levels(winRegions[,yVar]))-1 # number of categories
n <- 2
cat[c(1:n)]
paste(cat[c(1:n)], collapse = "+")
cat[c(n+1:length(cat))]
length(cat)
cat[4]
cat[3:4]
length(cat)
n+1
c(n+1:length(cat))
length(cat)
n+1
c(n+1:length(cat))
length(cat)
cat
cat[c(length(cat))]
cat[c((n+1):length(cat))]
pacman::p_load("Hmisc", "reshape2")
# Estimate values that will be graphed
sf <- function(y) {
nmax<-length(levels(winRegions[,yVar]))-1
vec<-c()
names<-c()
for (n in c(0:nmax)){
names <- c(names, paste0("Y>=",n))
vec<-c(vec, qlogis(mean( y >= n)))
}
names(vec)<-names
return(vec)
}
# Call function sf on several subsets of the data defined by the predictors
winRegions$numVar<-winRegions[,yVar]
levels(winRegions$numVar) <- c(1:length(levels(winRegions$numVar)))-1
winRegions$numVar <-as.numeric(as.character(winRegions$numVar))
s<-summary(as.formula(paste0("numVar ~ ", xVars)), data=winRegions, fun=sf)
# Get column names
namevec<-attributes(s)$vname
for(n in c(1:length(namevec))){  ifelse(namevec[n]=="", namevec[n] <- stored, stored <-namevec[n]) }
# Transform to dataframe
df<-data.frame(unclass(s))
df$categValues<-rownames(df)
df$categories<-namevec
# Melt dataframe
mdf<-melt(df, id.vars = c("categValues", "categories", "N"))
#Generate variable levels
cat<-unique(winRegions[,yVar])
cat<-cat[order(cat)]
ncat <- length(levels(winRegions[,yVar]))-1 # number of categories
varlevels<-c(">=0")
for(n in c(1:ncat)){varlevels <- c(varlevels, paste0( paste(cat[c(1:n)], collapse = "+"), " vs ", paste(cat[c((n+1):length(cat))], collapse = "+")))}
levels(mdf$variable)<-varlevels
# Plot
ggplot(mdf[mdf$categories !="Overall" & mdf$variable != ">=0",], aes(x = categValues, y = (value), color=variable, group = variable))+
geom_point()+geom_line()+
facet_wrap(categories~., scales = "free")+
scale_color_manual(values = c("#440154","#31688e","#35b779" ))+ #, "#fde725"
ggtitle("Proportional odds visual test")+
ylab("Log Odds Ratio")+xlab("")+
guides(color=guide_legend(title=yVar))+ theme(legend.position = "top", axis.text.x = element_text(size=8))
vectors<-list()
for (var in xVarsVector) {
if(samples[samples$vars == var, "sam"] == 0){
sim<-unique(winRegions[,var])
}else{
sim<-seq(min(winRegions[,var]), max(winRegions[,var]), length.out = samples[samples$vars==var,"sam"])
}
vectors[[var]]<-sim
}
vectors
samples
var
unique(winRegions[,var])
sim
sim<-unique(winRegions[,var])
samples[samples$vars == var, "sam"] == 0
samples$vars
samples$vars == var
samples[samples$vars == var, "sam"]
samples
if (!require("pacman")) install.packages("pacman")
# set conditions for code output
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE,fig.pos = "!H")
showcode=FALSE #for include or echo - echo=showcode
runbash=FALSE # for eval=runbash
runR=TRUE #for eval=runR
load(file= "data/winRegions.RData")
load(file= "data/analysisParams.RData")
pacman::p_load(MASS)
mod<-polr(myFormula, data = winRegions, Hess = T)
summary(mod)
## Store summary table
ctable <- coef(summary(mod))
## Calculate and store p values
p <- round(pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2, 8)
## combined table
ctable <- cbind(ctable, "p value" = p)
knitr::kable(ctable)
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint.default(mod) # CIs assuming normality
knitr::kable(ci)
CIodds<-data.frame(exp(cbind(OR = coef(mod), ci)))
colnames(CIodds)<-c("Odds Ratio", "2.5%", "97.5%")
knitr::kable(CIodds)
pacman::p_load("ggplot2")
# Finally, a summary of the model
CIodds$Variable<-rownames(CIodds)
ctable<-data.frame(ctable)
ctable$Variable<-rownames(ctable)
CIodds<-merge(CIodds, ctable)
CIodds$sig<-ifelse(CIodds$p.value < 0.05, T, F)
ggplot(CIodds)+geom_point(aes(x = Variable, y = `Odds Ratio`) )+
geom_errorbar(aes(ymin=`2.5%`, ymax=`97.5%`, x=Variable), width=.1, alpha = 0.5)+
geom_text(aes(x = Variable, y = Inf, label = round(p.value, 3), color = sig), vjust = 1.5, size = 3)+
scale_color_manual(values=c("FALSE"="black","TRUE"="red"))+
theme(legend.position = "none")+
geom_hline(yintercept=1, width=.1, alpha = 0.3)+
ggtitle("Odds ratios calculated from coefficients")
pacman::p_load("brant", "Hmisc")
btest<-brant(mod)
knitr::kable(btest)
pacman::p_load("Hmisc", "reshape2")
# Estimate values that will be graphed
sf <- function(y) {
nmax<-length(levels(winRegions[,yVar]))-1
vec<-c()
names<-c()
for (n in c(0:nmax)){
names <- c(names, paste0("Y>=",n))
vec<-c(vec, qlogis(mean( y >= n)))
}
names(vec)<-names
return(vec)
}
# Call function sf on several subsets of the data defined by the predictors
winRegions$numVar<-winRegions[,yVar]
levels(winRegions$numVar) <- c(1:length(levels(winRegions$numVar)))-1
winRegions$numVar <-as.numeric(as.character(winRegions$numVar))
s<-summary(as.formula(paste0("numVar ~ ", xVars)), data=winRegions, fun=sf)
# Get column names
namevec<-attributes(s)$vname
for(n in c(1:length(namevec))){  ifelse(namevec[n]=="", namevec[n] <- stored, stored <-namevec[n]) }
# Transform to dataframe
df<-data.frame(unclass(s))
df$categValues<-rownames(df)
df$categories<-namevec
# Melt dataframe
mdf<-melt(df, id.vars = c("categValues", "categories", "N"))
#Generate variable levels
cat<-unique(winRegions[,yVar])
cat<-cat[order(cat)]
ncat <- length(levels(winRegions[,yVar]))-1 # number of categories
varlevels<-c(">=0")
for(n in c(1:ncat)){varlevels <- c(varlevels, paste0( paste(cat[c(1:n)], collapse = "+"), " vs ", paste(cat[c((n+1):length(cat))], collapse = "+")))}
levels(mdf$variable)<-varlevels
# Plot
ggplot(mdf[mdf$categories !="Overall" & mdf$variable != ">=0",], aes(x = categValues, y = (value), color=variable, group = variable))+
geom_point()+geom_line()+
facet_wrap(categories~., scales = "free")+
scale_color_manual(values = c("#440154","#31688e","#35b779" ))+ #, "#fde725"
ggtitle("Proportional odds visual test")+
ylab("Log Odds Ratio")+xlab("")+
guides(color=guide_legend(title=yVar))+ theme(legend.position = "top", axis.text.x = element_text(size=8))
vectors<-list()
for (var in xVarsVector) {
if(samples[samples$vars == var, "sam"] == 0){
sim<-unique(winRegions[,var])
}else{
sim<-seq(min(winRegions[,var]), max(winRegions[,var]), length.out = samples[samples$vars==var,"sam"])
}
vectors[[var]]<-sim
}
# Make all combination for all values
data_sim<-expand.grid(vectors)
colnames(data_sim)<-xVarsVector
# Calculate probabilities for each case
data_sim <- cbind(data_sim, predict(mod, data_sim, type = "probs"))
# Make plot
data_plot <- melt(data_sim, id.vars = xVarsVector,value.name="Probability", variable.name = "Level")
for (var in xVarsVector) {
if(!is.na(samples[samples$vars == var, "names"])){
data_plot[,var]<-factor(data_plot[,var], labels = strsplit(samples[samples$vars == var, "names"], ", " )[[1]])
}
}
pacman::p_load("viridisLite", "ggplot2")
main<-samples$vars[order(samples$sam, decreasing = T)][1]
categorical<-samples$vars[which(samples$sam == 0)]
continuousCategorical<-samples$vars[!(samples$vars %in% c(main, categorical) ) ]
alphaVar<-continuousCategorical[1]
categorical_col<-paste(categorical, collapse ="+")
continuousCategorical_col<-paste(continuousCategorical[-1], collapse ="+")
colors<-viridis(length(unique(data_plot$Level)), end=0.9)
ggplot(data_plot) +geom_line(aes_string(x = main, y = "Probability", group = paste0("interaction(Level,", alphaVar,")"), color="Level", alpha  = alphaVar))+
facet_grid(paste0(continuousCategorical_col," ~ ",categorical_col),labeller = "label_both" )+
# scale_color_manual(values = c("#440154","#31688e","#35b779" , "#c8e020"))+
scale_color_manual(values = colors)+
ggtitle(paste0("Probability of inversion level (",yVar,") for multiple scenarios"))+
theme(legend.position = "top",legend.box="vertical")
main<-samples$vars[order(samples$sam, decreasing = T)][1]
categorical<-samples$vars[which(samples$sam == 0)]
continuousCategorical<-samples$vars[!(samples$vars %in% c(main, categorical) ) ]
alphaVar<-continuousCategorical[1]
categorical_col<-paste(categorical, collapse ="+")
continuousCategorical_col<-paste(continuousCategorical[-1], collapse ="+")
categorical_col
colors<-viridis(length(unique(data_plot$Level)), end=0.9)
paste0(continuousCategorical_col," ~ ",categorical_col)
as.formula(paste0(continuousCategorical_col," ~ ",categorical_col))
ggplot(data_plot) +geom_line(aes_string(x = main, y = "Probability", group = paste0("interaction(Level,", alphaVar,")"), color="Level", alpha  = alphaVar))+
facet_grid(as.formula(paste0(continuousCategorical_col," ~ ",categorical_col)),labeller = "label_both" )+
# scale_color_manual(values = c("#440154","#31688e","#35b779" , "#c8e020"))+
scale_color_manual(values = colors)+
ggtitle(paste0("Probability of inversion level (",yVar,") for multiple scenarios"))+
theme(legend.position = "top",legend.box="vertical")
if (!require("pacman")) install.packages("pacman")
# set conditions for code output
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE,fig.pos = "!H")
showcode=FALSE #for include or echo - echo=showcode
runbash=FALSE # for eval=runbash
runR=TRUE #for eval=runR
load(file= "data/winRegions.RData")
load(file= "data/analysisParams.RData")
pacman::p_load(MASS)
mod<-glm(myFormula, data = winRegions,family=binomial)
summary(mod)
myFormula
pacman::p_load(MASS)
mod<-glm(myFormula, data = winRegions,family=binomial)
summary(mod)
## Store summary table
ctable <- coef(summary(mod))
## Calculate and store p values
p <- round(pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2, 8)
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint.default(mod) # CIs assuming normality
knitr::kable(ci)
CIodds<-data.frame(exp(cbind(OR = coef(mod), ci)))
colnames(CIodds)<-c("Odds Ratio", "2.5%", "97.5%")
knitr::kable(CIodds)
pacman::p_load("ggplot2")
# Finally, a summary of the model
CIodds$Variable<-rownames(CIodds)
ctable<-data.frame(ctable)
ctable$Variable<-rownames(ctable)
CIodds<-merge(CIodds, ctable)
CIodds$sig<-ifelse(CIodds$p.value < 0.05, T, F)
CIodds
CIodds
ctable
ctable<-mod$coefficients
ctable
summary(mod)
mod$coefficients
summary(mod)
coef(mod)[2]
coef(summary(fit))[,4]
coef(summary(mod))[,4]
summary(mod)
coef(summary(mod))[,4]
ctable<-coef(summary(mod))[,4]
ctable
ctable<-data.frame(coef(summary(mod))[,4])
ctable
colnames(ctable)
pacman::p_load(MASS)
mod<-glm(myFormula, data = winRegions,family=binomial)
summary(mod)
ctable<-data.frame(coef(summary(mod))[,4])
colnames(ctable)<-c("p.value")
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint.default(mod) # CIs assuming normality
knitr::kable(ci)
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint.glm(mod) # CIs assuming normality
pacman::p_load(MASS)
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint(mod) # CIs assuming normality
knitr::kable(ci)
pacman::p_load(MASS)
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint(mod, trace=TRUE) # CIs assuming normality
knitr::kable(ci)
pacman::p_load(MASS)
# print("Profiling likelihod")
# (ci <- confint(mod)) # default method gives profiled CIs
# print("Assuming a normal distribtuion")
ci<-confint(mod) # CIs assuming normality
knitr::kable(ci)
CIodds<-data.frame(exp(cbind(OR = coef(mod), ci)))
colnames(CIodds)<-c("Odds Ratio", "2.5%", "97.5%")
knitr::kable(CIodds)
pacman::p_load("ggplot2")
# Finally, a summary of the model
CIodds$Variable<-rownames(CIodds)
ctable<-data.frame(ctable)
ctable$Variable<-rownames(ctable)
CIodds<-merge(CIodds, ctable)
CIodds$sig<-ifelse(CIodds$p.value < 0.05, T, F)
ggplot(CIodds)+geom_point(aes(x = Variable, y = `Odds Ratio`) )+
geom_errorbar(aes(ymin=`2.5%`, ymax=`97.5%`, x=Variable), width=.1, alpha = 0.5)+
geom_text(aes(x = Variable, y = Inf, label = round(p.value, 3), color = sig), vjust = 1.5, size = 3)+
scale_color_manual(values=c("FALSE"="black","TRUE"="red"))+
theme(legend.position = "none")+
geom_hline(yintercept=1, width=.1, alpha = 0.3)+
ggtitle("Odds ratios calculated from coefficients")
